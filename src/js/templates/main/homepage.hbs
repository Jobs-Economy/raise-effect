<h1 class="page-header">Raise Effect</h1>

<p class="lead">The Oregon minimum wage is currently <a href="#">$9.25</a>. Is that enough? Weâ€™ve looked at different types of families in the state of Oregon to see if the current minimum wage supports <a href="#">self-sufficiency</a>.</p>

<script type="text/javascript">
//   var info = L.control();

//   info.onAdd = function (map) {
//     this._div = L.DomUtil.create('div', 'info');
//     this.update();
//     return this._div;
//   };

//   info.update = function (props) {
//     var countyInfo = (props ?
//       '<h4>' + props.name + '</h4><br />GeoID: ' + props.geoid
//       : '<h4>Hover over a county</h4>');
//     if (props) {
//         var id = countyId(props.name);
//         var countyData = formattedCountyData(id);
//         this._div.innerHTML = countyInfo + countyData;
//     }
//     else {
//         this._div.innerHTML = countyInfo;
//     };
//   };

//   info.addTo(map);

//   var legend = L.control({position: 'bottomright'});

//   legend.onAdd = function (map) {

//       var div = L.DomUtil.create('div', 'info legend'),
//           grades = [0, 35000, 40000, 45000, 50000, 55000],
//           labels = [];

//       div.innerHTML += 'Median Income:<br>';

//       // loop through our density intervals and generate a label with a colored square for each interval
//       for (var i = 0; i < grades.length; i++) {
//           div.innerHTML +=
//               '<i style="background:' + getColorBasedOnNumber(grades[i] + 1) + '"></i> ' +
//               grades[i] + (grades[i + 1] ? '&ndash;' + grades[i + 1] + '<br>' : '+');
//       }

//       return div;
//   };

//   legend.addTo(map);

//   function style(feature) {
//     return {
//       weight: 2,
//       opacity: 1,
//       color: 'white',
//       dashArray: '3',
//       fillOpacity: 0.7,
//       fillColor: getColorBasedOn(feature),
//     };
//   }

//

//   var geojson;

//   function resetHighlight(e) {
//     geojson.resetStyle(e.target);
//     info.update();
//   }

//   function zoomToFeature(e) {
//     map.fitBounds(e.target.getBounds());
//   }

//   function onEachFeature(feature, layer) {
//     layer.on({
//       mouseover: highlightFeature,
//       mouseout: resetHighlight,
//       click: zoomToFeature
//     });
//   }

//   function getColor() {
//     return '#3182bd';
//   }


//   function getHighlightColor() {
//     return '#08306b';
//   }

//   function getColorBasedOn(feature) {
//     var id = countyId(feature.properties.name);
//     var medianIncome = 0;
//     if(sampleCountiesJSON.hasOwnProperty(id)){
//       var medianIncome = sampleCountiesJSON[id]["median household income"];
//     };
//     var medianIncome = sampleCountiesJSON[id]["median household income"];
//     return getColorBasedOnNumber(medianIncome);
//   }

//   function getColorBasedOnNumber(medianIncome) {
//     if (medianIncome < 35000) {
//       return '#eff3ff';
//     } else if (medianIncome >= 35000 && medianIncome < 40000) {
//       return '#c6dbef';
//     } else if (medianIncome >= 40000 && medianIncome < 45000) {
//       return '#9ecae1';
//     } else if (medianIncome >= 45000 && medianIncome < 50000) {
//       return '#6baed6';
//     } else if (medianIncome >= 50000 && medianIncome < 55000) {
//       return '#3182bd';
//     } else if (medianIncome >= 55000) {
//       return '#08519c';
//     };
//   }

//   function countyId(countyName) {
//     return countyName.split(' County')[0];
//   }

//   function formattedCountyData(id) {
//     var m = numberWithCommas(sampleCountiesJSON[id]["median household income"],0);
//     var s = numberWithCommas(sampleCountiesJSON[id]["ss - adult"],0);
//     var a = numberWithCommas(sampleCountiesJSON[id]["assumed minimum wage"],2);
//     var p = numberWithCommas(sampleCountiesJSON[id]["percentss - adult"]*100,0);
//     return '<br />Median Household Income: $' + m + '<br />Self Sufficiency Standard for 1 Adult: $' + s + '<br />Assumed Minimum Wage: $' + a + '<br />Percent Self Sufficient for 1 Adult: ' + p + '%';
//   }

//   function numberWithCommas(x, digits) {
//       var parts = x.toFixed(digits).split(".");
//       parts[0] = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, ",");
//       return parts.join(".");
//   }

//   geojson = L.geoJson(counties, {
//     style: style,
//     onEachFeature: onEachFeature
//   }).addTo(map);
</script>
